//Object - method
객체 프로퍼티로 할당된 함수
method에서는 객체명을 직접 써주는것 보다 this를 활용하는 것이 좋음

const superman = {
  name: 'clark',
  age: 33,
  fly: function(){
    console.log('날아갑니다.')
  }
}
_______________________________________________________________________________
//단축구문으로 작성하면
const superman = {
  name: 'clark',
  age: 33,
  fly(){
    console.log('날아갑니다.')
  }
}
_______________________________________________________________________________
//Obejct - this
//객체와 메소드의 관계
const user = {
  name: 'Mike',
  sayHello:function(){
    console.log(`Hello, I'm ${this.name}`);
  }
}
_______________________________________________________________________________
let boy = {
  name: 'Mike',
  sayHello,
}
sayHello: function(){
  console.log(`Hello, I'm ${this.name}`);
}
boy.sayHello(); //Mike
_______________________________________________________________________________
//화살표함수로 선언하면 동작이 달라짐
화살표 함수는 일반함수와 달리 자신만의 this를 가지지 않음
화살표 함수 내부에서 this를 사용하면, 그 this는 외부에서 값을 가져옴
let = boy {
  name: 'Mike',
  sayHello:() => {
    console.log(this); //전역객체
  }
}
boy.sayHello();   //this != boy
_______________________________________________________________________________